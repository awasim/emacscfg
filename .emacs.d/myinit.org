* Misc Settings
#+BEGIN_SRC emacs-lisp
; Misc Settings
(tool-bar-mode -1)
(setq scroll-step 1)
(setq default-tab-width 4)
(setq inhibit-splash-screen t)
(menu-bar-mode 0)
(size-indication-mode 1)
(scroll-bar-mode -1)
(global-linum-mode 1) 
(setq make-backup-files nil)
(fset 'yes-or-no-p 'y-or-n-p)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC
* try
#+BEGIN_SRC emacs-lisp
(use-package try
:ensure t)
#+END_SRC
* package installs
#+BEGIN_SRC emacs-lisp
; list the packages you want
(setq package-list '(elpy octicons powerline dracula-theme night-owl-theme rust-mode js2-mode rainbow-delimiters))

; fetch the list of packages available 
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))
#+END_SRC
* which
#+BEGIN_SRC emacs-lisp
(use-package which-key
:ensure t
:config (which-key-mode))
#+END_SRC
* rainbow
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
:ensure t
:config 
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
* ido
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC
* Fonts
#+BEGIN_SRC emacs-lisp
(require 'font-lock)
(setq-default font-lock-maximum-decoration t)
#+END_SRC
* Frame Size
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(height . 45))
(add-to-list 'default-frame-alist '(width . 115))
#+END_SRC
* Scrolling Fix
#+BEGIN_SRC emacs-lisp
(setq scroll-margin 1
      scroll-conservatively 0
      scroll-up-aggressively 0.01
      scroll-down-aggressively 0.01)
(setq-default scroll-up-aggressively 0.01
			  scroll-down-aggressively 0.01)
#+END_SRC
* Keyboard 
#+BEGIN_SRC emacs-lisp
(global-set-key [f7] 'previous-buffer)
(global-set-key [f8] 'next-buffer)
(global-set-key [f6] 'other-window)
(global-set-key [f5] 'frame-setup)
(global-set-key (kbd "C-q") 'global-visual-line-mode)
(global-set-key (kbd "C-c d") 'insert-date)
(global-set-key (kbd "C-c e") 'insert-time)
(global-set-key (kbd "C-c y") 'new-day)
(global-set-key [f4] 'eval-buffer)
#+END_SRC
* Color Themes
#+BEGIN_SRC emacs-lisp
(defun set-light-theme ()
  "Set the light theme with some customization if needed."
  (interactive)
  (load-theme 'dracula t))

(defun set-dark-theme ()
  "Set the dark theme with some customization if needed."
  (interactive)
  (load-theme 'night-owl t))

(defun theme-switcher ()
  (let ((current-hour (string-to-number (format-time-string "%H"))))
    (if (or (< current-hour 9) (> current-hour 18)) (set-dark-theme) (set-light-theme))))

;; (let ((current-hour (string-to-number (format-time-string "%H"))))
;;  (if (or (< current-hour 6) (> current-hour 20)) (set-light-theme) (set-dark-theme)))

;; Run at every 3600 seconds, after 0s delay
(run-with-timer 0 3600 'theme-switcher)
#+END_SRC
* JS2
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.json$" . js2-mode))


#+END_SRC
* Org Mode configs
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(add-hook 'org-mode-hook 'turn-on-font-lock)  ; Org buffers only
(font-lock-add-keywords 'org-mode
                        '(("^ +\\([-*]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "ï¿½"))))))
(add-hook 'org-mode-hook (lambda () (linum-mode 0)))
(use-package org-bullets
:ensure t
:config
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
(setq gc-cons-threshold (* 511 1024 1024))
(setq gc-cons-percentage 0.5)
(run-with-idle-timer 5 t #'garbage-collect)
(setq garbage-collection-messages t)
#+END_SRC
* Transparent Window
#+BEGIN_SRC emacs-lisp
(defun transparent(alpha-level no-focus-alpha-level)
  "Let's you make the window transparent"
  (interactive "nAlpha level (0-100): \nnNo focus alpha level (0-100): ")
  (set-frame-parameter (selected-frame) 'alpha (list alpha-level no-focus-alpha-level))
  (add-to-list 'default-frame-alist `(alpha ,alpha-level)))
(transparent 90 85)
(defun on-frame-open (&optional frame)
  "If the FRAME created in terminal don't load background color."
  (unless (display-graphic-p frame)
	(set-face-background 'default "unspecified-bg" frame)))

(add-hook 'after-make-frame-functions 'on-frame-open)
#+END_SRC
* Journal Functions
#+BEGIN_SRC emacs-lisp
  ; Insert Date
  (defun idate()
    "Insert a time stamp without org bullet point"
    (interactive)
    (insert (format-time-string "%a, %e %b %Y, %k:%M" (current-time))))

  (defun insert-date()
    "Insert a time-stamp according to locale's date and time format."
    (interactive)
    (insert (format-time-string "** %a, %e %b %Y, %k:%M" (current-time))))

  (defun insert-time()
    "Insert a time-stamp according to locale's date and time format."
    (interactive)
    (insert (format-time-string "%l:%M:%S %p -> " (current-time))))

  ;;;enable narrowing- C-x n n to enable -  C-x n w to end.
  (put 'narrow-to-region 'disabled nil)

  (defun new-day ()
    "Insert new date and underline"
    (interactive)
    (insert-date)
    (insert "\n--------------------------\n\n"))
#+END_SRC
* Operating system specific
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt) 
	; Windows stuff goes here
	(progn
	   (global-set-key [f12] 'explorer)  
	   (global-set-key [f11] 'fullscreen)
	   (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
	   (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
	   (global-set-key (kbd "S-C-<down>") 'shrink-window)
	   (global-set-key (kbd "S-C-<up>") 'enlarge-window)
	   )
)

(if (eq system-type 'gnu/linux)
	 (progn
	   ;; (set-default-font "-*-Monospace-*-*-*-*-12-*-*-*-*-*-iso8859-1")
	   (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
	   (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
	   (global-set-key (kbd "S-C-<down>") 'shrink-window)
	   (global-set-key (kbd "S-C-<up>") 'enlarge-window))
	  )


(if (eq window-system 'nil)
	(progn
	 (global-set-key [f12] 'shrink-window-horizontally)
	 (global-set-key [f11] 'enlarge-window-horizontally)
	 (global-set-key [f10] 'shrink-window)
	 (global-set-key [f9] 'enlarge-window)
	 (setq linum-format "%d ")
;;	 (defun on-after-init ()
;;	   (unless (display-graphic-p (selected-frame))
;;		 (set-face-background 'default "unspecified-bg" (selected-frame))))
;;
;;	 (add-hook 'window-setup-hook 'on-after-init)

	 (defun on-frame-open (&optional frame)
	   "If the FRAME created in terminal don't load background color."
	   (unless (display-graphic-p frame)
		 (set-face-background 'default "unspecified-bg" frame)))
	 
	 (add-hook 'after-make-frame-functions 'on-frame-open)
	 )
  )
#+END_SRC
* Emacs Server Start
#+BEGIN_SRC emacs-lisp
; Server
(server-start)
#+END_SRC
* Emacs Server Shutdown
#+BEGIN_SRC emacs-lisp
;; define function to shutdown emacs server instance
(defun server-shutdown ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs)
    )
#+END_SRC
* Utf8 Shell
#+BEGIN_SRC emacs-lisp
;; Enable colors for normal shell
(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

(defun utf8-shell()
  "Create Shell that supports UTF-8."
  (interactive)
  (set-default-coding-systems 'utf-8)
  (shell))

(defun rutf8-shell()
  "Create a shell that supports UTF-8, and rename buffer"
  (interactive)
  (set-default-coding-systems 'utf-8)
  (shell)
  (rename-buffer (read-string "Enter buffer name:")))
#+END_SRC
* Elpy
#+BEGIN_SRC emacs-lisp
(elpy-enable)
(setq python-indent 4)
#+END_SRC
* Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
:ensure t)
#+END_SRC

* Ociticons
#+BEGIN_SRC emacs-lisp
(require 'octicons)

(make-face 'octicons-mode-line)
(set-face-attribute 'octicons-mode-line nil
                    :inherit 'mode-line
                    :inherit 'octicons)

(setq-default mode-line-format (list
    " "
    '(:eval (if (vc-backend buffer-file-name)
                (list
                 (propertize octicon-octoface 'face 'octicons-modeline)
                 (propertize " "              'face 'mode-line))))
   mode-line-mule-info
   'mode-line-modified
   "-  "
   'mode-line-buffer-identification
   "  (%l, %c)  "
   'mode-line-modes
   " -- "
   `(vc-mode vc-mode)
))
#+END_SRC
* Powerline
#+BEGIN_SRC emacs-lisp
(require 'powerline)
(powerline-default-theme)
(setq powerline-text-scale-factor 0.8)
#+END_SRC
* Expand Region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+END_SRC
